#!/p/bin/perl -w

$sort = './sort';
$test = 0;
$| = 1;

print "#! /bin/sh\nsort='$sort'\necho testing with sort=\$sort\nerrors=0\n";
print "$sort --version 2> /dev/null\n";
$expected = '';
$input = '';
$options = '';

while (<>)
  {
    next if (/^\s*#/);

    $test++;
    chop;
    $prog = '($test_name, $options,$input,$expected,$e_ret_code) = ' . $_ . ';';
    eval $prog;
    if (defined ($seen{$test_name}))
      {
	die "$0: $.: duplicate test name \`$test_name'\n";
      }
    $seen{$test_name} = 1;
    $in = "t$test_name.in";
    $exp_name = 't' . $test_name . '.exp';
    $out = "t$test_name.out";

    open(IN, ">$in") || die "Couldn't open $in for writing.\n";
    print IN $input;
    close(IN);
    open(EXP, ">$exp_name")
	|| die "Couldn't open $exp_name for writing.\n";
    print EXP $expected;
    close(EXP);
    $err_output = "t$test_name.err";
    $cmd = "\$sort $options $in > $out 2> $err_output";
    print <<EOF ;
$cmd
code=\$?
if test \$code != $e_ret_code ; then
  echo Test $test_name failed: sort return code \$code differs from expected value $e_ret_code 1>&2
  errors=`expr \$errors + 1`
else
  cmp $out $exp_name
  case \$? in
    0) if test "\$verbose" ; then echo passed $test_name; fi ;; # equal files
    1) echo Test $test_name failed: files $out and $exp_name differ 1>&2;
       errors=`expr \$errors + 1` ;;
    2) echo Test $test_name may have failed. 1>&2;
       echo The command \"cmp $out $exp_name\" failed. 1>&2 ;
       errors=`expr \$errors + 1` ;;
  esac
fi
test -s $err_output || rm -f $err_output
EOF
  }
print <<EOF2 ;
if test \$errors = 0 ; then
  echo Passed all tests. 1>&2
else
  echo Failed \$errors tests. 1>&2
fi
EOF2
